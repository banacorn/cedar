// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['models/filetree', 'jquery', 'underscore', 'backbone'], function(ModelFiletree, $, _, Backbone) {
    var Collection;
    return Collection = (function(_super) {

      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.model = ModelFiletree;

      Collection.prototype.url = function() {
        return "/api/project_files/?project_id=" + this.id;
      };

      Collection.prototype.parse = function(data) {
        var fold, models, root;
        if (data == null) {
          data = [];
        }
        models = [];
        root = '';
        fold = function(tree, level, prefix) {
          var node, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = tree.length; _i < _len; _i++) {
            node = tree[_i];
            if (level === 0) {
              prefix = node.filepath.length;
            }
            node.level = level;
            node.path = node.filepath.substr(prefix) + '/' + node.name;
            node.path = node.path.replace(/^\//, '');
            delete node.filepath;
            if (node.children.length !== 0) {
              fold(node.children, level + 1, prefix);
            }
            delete node.children;
            _results.push(models.push(node));
          }
          return _results;
        };
        fold(data, 0);
        return models;
      };

      Collection.prototype.children = function() {
        var level, model, result, yggdrasil, _ref;
        level = _.compact(this.path.replace(/\/$/, '').split('/')).length;
        model = this.where({
          level: level
        }).map(function(model) {
          return model.toJSON();
        });
        if ((_ref = model[0]) != null ? _ref.id : void 0) {
          yggdrasil = Backbone.Stat.get("yggdrasil-" + this.id);
          result = null;
          Backbone.Stat.fold(yggdrasil, function(tree, poop) {
            if (tree.id === model[0].id) {
              return result = tree;
            }
          });
          model[0].numberOfFiles = result.numberOfFiles;
          model[0].numberOfEntries = result.numberOfEntries;
        }
        return model;
      };

      Collection.prototype.node = function() {
        var _ref;
        return (_ref = this.where({
          path: this.path
        })[0]) != null ? _ref.toJSON() : void 0;
      };

      Collection.prototype.numberOfFiles = function() {
        return yggdrasil.numberOfFiles;
      };

      Collection.prototype.root = function() {
        if (this.path !== '') {
          return this.path + '/';
        } else {
          return '';
        }
      };

      return Collection;

    })(Backbone.Collection);
  });

}).call(this);
