// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require.config({
    paths: {
      jquery: 'jam/jquery/jquery',
      underscore: 'jam/underscore/underscore',
      backbone: 'jam/backbone/backbone',
      hogan: 'jam/hogan/hogan',
      router: 'router',
      model: 'model',
      voir: 'voir',
      template: 'template'
    }
  });

  require(['jquery', 'underscore', 'backbone', 'storage', 'router', 'voir'], function($, _, Backbone, storage, router, view) {
    var App;
    Backbone.remoteSync = Backbone.sync;
    Backbone.Collection.prototype.snatch = function(callback) {
      var cb,
        _this = this;
      cb = function() {
        if (typeof callback === "function") {
          callback();
        }
        return _this.off('reset', cb);
      };
      this.on('reset', cb);
      return this.fetch({
        silent: true,
        success: function(collection, res) {
          var cache, url;
          url = (typeof collection.url === "function" ? collection.url() : void 0) || collection.url;
          cache = localStorage[url];
          if (!(cache != null) || !_.isEqual(collection.toJSON(), JSON.parse(cache))) {
            return collection.trigger('reset');
          }
        }
      });
    };
    Backbone.View.prototype.assign = function(view, selector) {
      return view.setElement($(selector)).render();
    };
    Backbone.sync = function() {
      Backbone.remoteSync.apply(this, arguments);
      return storage.apply(this, arguments);
    };
    App = (function(_super) {

      __extends(App, _super);

      function App() {
        return App.__super__.constructor.apply(this, arguments);
      }

      App.prototype.el = 'body';

      App.prototype.render = function() {
        var account;
        account = new view.Account;
        this.assign(account, '#account');
        return $('#account').hide().fadeIn();
      };

      return App;

    })(Backbone.View);
    return $(function() {
      var app;
      app = new App;
      app.render();
      router.on('route:home', function() {
        var home;
        home = new view.Home;
        return home.render();
      });
      $('a').live('click', function(e) {
        router.navigate($(this).attr('href'), true);
        return false;
      });
      return Backbone.history.start({
        pushState: true
      });
    });
  });

}).call(this);
