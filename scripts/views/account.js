// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['models/account', 'jquery', 'backbone', 'template'], function(ModelAccount, $, Backbone, $$) {
    var Account, SignInBox;
    SignInBox = (function(_super) {

      __extends(SignInBox, _super);

      function SignInBox() {
        return SignInBox.__super__.constructor.apply(this, arguments);
      }

      SignInBox.prototype.events = {
        'click': 'close',
        'click #signin-box': 'click',
        'submit form': 'submit',
        'focus input': 'select',
        'click button': 'submit',
        'keydown': 'keydown'
      };

      SignInBox.prototype.initialize = function() {
        this.template = $$.signinbox;
        return $('input').change(function() {
          return console.log('changed!!!');
        });
      };

      SignInBox.prototype.render = function() {
        this.$el.html(this.template.render());
        return this;
      };

      SignInBox.prototype.submit = function() {
        Backbone.account.signin($('#signin-username').val(), $('#signin-password').val());
        return $('#signin-button').text('驗證中 ...').addClass('pending');
      };

      SignInBox.prototype.fail = function() {
        $('#signin-username').addClass('invalid').focus();
        $('#signin-password').addClass('invalid');
        return $('#signin-button').text('帳號密碼錯誤').removeClass('pending');
      };

      SignInBox.prototype.close = function() {
        return this.remove();
      };

      SignInBox.prototype.click = function() {
        return false;
      };

      SignInBox.prototype.render = function() {
        this.$el.html(this.template.render()).hide().fadeIn(200);
        setTimeout(function() {
          return $('#signin-username').focus();
        }, 0);
        return this;
      };

      SignInBox.prototype.select = function(event) {
        return setTimeout(function() {
          return event.target.select();
        }, 0);
      };

      SignInBox.prototype.keydown = function(event) {
        if (event.keyCode === 27) {
          return this.close();
        }
      };

      return SignInBox;

    })(Backbone.View);
    Account = (function(_super) {

      __extends(Account, _super);

      function Account() {
        return Account.__super__.constructor.apply(this, arguments);
      }

      Account.prototype.initialize = function() {
        var _this = this;
        this.listenTo(Backbone.account, 'change', this.render);
        this.template = $$.account;
        this.box = new SignInBox({
          model: this.account
        });
        Backbone.on('authorized', function() {
          return _this.box.close();
        });
        return Backbone.on('authorization failed', function() {
          return _this.box.fail();
        });
      };

      Account.prototype.render = function() {
        this.$el.html(this.template.render({
          authorized: Backbone.account.get('authorized'),
          username: Backbone.account.get('username')
        }));
        return this;
      };

      Account.prototype.events = {
        'click #account-panel': 'signin',
        'click #account-settings': 'close',
        'click #account-signout': 'signout',
        'mouseover': 'open',
        'mouseout': 'close'
      };

      Account.prototype.open = function() {
        return this.$el.addClass('active');
      };

      Account.prototype.close = function() {
        return this.$el.removeClass('active');
      };

      Account.prototype.signin = function() {
        if (!Backbone.account.get('authorized')) {
          $('#main').append('<div id="slot"></div>');
          this.assign(this.box, '#slot');
        }
        return this.close();
      };

      Account.prototype.signout = function() {
        if (Backbone.account.get('authorized')) {
          Backbone.account.signout();
        }
        return this.close();
      };

      return Account;

    })(Backbone.View);
    Backbone.account = new ModelAccount;
    Backbone.account.authorize();
    return Account;
  });

}).call(this);
