// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['collections/entry', 'collections/locale', 'collections/localetree', 'views/entry', 'jquery', 'backbone', 'template'], function(CollectionEntry, CollectionLocale, CollectionLocaletree, ViewEntry, $, Backbone, $$) {
    var ProjectBreadcrumb;
    return ProjectBreadcrumb = (function(_super) {

      __extends(ProjectBreadcrumb, _super);

      function ProjectBreadcrumb() {
        return ProjectBreadcrumb.__super__.constructor.apply(this, arguments);
      }

      ProjectBreadcrumb.prototype.tagName = 'ol';

      ProjectBreadcrumb.prototype.initialize = function() {
        var _this = this;
        this.collection.on('reset', function() {
          return _this.render();
        });
        return this.view = {
          Entries: ViewEntry
        };
      };

      ProjectBreadcrumb.prototype.render = function() {
        var fileID, isFile, locales, projectID, _ref,
          _this = this;
        this.template = $$.filebrowser;
        isFile = ((_ref = this.collection.node()) != null ? _ref.folder : void 0) === false;
        this.$el.html(this.template.render({
          isFile: isFile,
          files: this.collection.children(),
          root: this.collection.root(),
          projectName: this.collection.name
        }));
        projectID = this.collection.id;
        fileID = this.collection.node();
        if (isFile) {
          locales = new CollectionLocale;
          locales.id = projectID;
          locales.snatch(function() {
            var localeTree, projectLocaleID, _ref1;
            projectLocaleID = (_ref1 = locales.where({
              localeID: 1
            })) != null ? _ref1[0].get('id') : void 0;
            localeTree = new CollectionLocaletree;
            localeTree.id = projectLocaleID;
            return localeTree.snatch(function() {
              var entries, entriesView, projectFileID, _ref2;
              projectFileID = _this.collection.node().id;
              fileID = (_ref2 = localeTree.where({
                'project_file_id': projectFileID
              })) != null ? _ref2[0].get('id') : void 0;
              entries = new CollectionEntry;
              entries.id = fileID;
              entriesView = new ViewEntry({
                collection: entries
              });
              _this.assign(entriesView, '#project-file');
              return entries.snatch();
            });
          });
        }
        return this;
      };

      return ProjectBreadcrumb;

    })(Backbone.View);
  });

}).call(this);
