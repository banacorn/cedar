// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'hogan', 'template', 'model'], function($, _, Backbone, hogan, template, MODEL) {
    var Project;
    return Project = (function(_super) {

      __extends(Project, _super);

      function Project() {
        return Project.__super__.constructor.apply(this, arguments);
      }

      Project.prototype.el = $('#main');

      Project.prototype.initialize = function() {
        this.template = template.project;
        this.projectList = new MODEL.ProjectList;
        this.fileTree = new MODEL.FileTree;
        return this.locales = new MODEL.Locales;
      };

      Project.prototype.render = function(name, path) {
        var _this = this;
        this.projectList.snatch(function() {
          var project;
          project = _this.projectList.where({
            name: name
          })[0];
          _this.fileTree.id = project.id;
          return _this.fileTree.snatch(function() {
            var fileTree, inits, level, pathname, root, segment, segments, _i, _len;
            if (path != null) {
              pathname = path.replace(/\/$/, '');
            } else {
              pathname = '';
            }
            level = _.compact(pathname.replace(/\/$/, '').split('/')).length;
            fileTree = _this.fileTree.where({
              level: level
            }).map(function(model) {
              return model.toJSON();
            });
            segments = _.compact(pathname.split('/'));
            inits = [''];
            for (_i = 0, _len = segments.length; _i < _len; _i++) {
              segment = segments[_i];
              inits.push(_.last(inits) + segment + '/');
            }
            inits = _.tail(inits);
            inits = _(inits).map(function(e, i) {
              return {
                segment: e,
                pathname: segments[i]
              };
            });
            if (pathname !== '') {
              root = pathname + '/';
            } else {
              root = '';
            }
            console.log(fileTree);
            _this.$el.html(_this.template.render({
              projectName: project.get('name'),
              projectInfo: project.get('info'),
              id: project.id,
              files: fileTree,
              crumbs: inits,
              root: root
            }));
            _this.locales.id = project.id;
            return _this.locales.snatch(function() {});
          });
        });
        return this;
      };

      return Project;

    })(Backbone.View);
  });

}).call(this);
