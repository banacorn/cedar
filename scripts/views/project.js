// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['collections/filetree', 'collections/project', 'models/project/breadcrumb', 'views/filebrowser', 'views/project/breadcrumb', 'jquery', 'backbone', 'template'], function(CollectionFiletree, CollectionProject, ModelProjectBreadcrumb, ViewFilebrowser, ViewProjectBreadcrumb, $, Backbone, $$) {
    var Project;
    return Project = (function(_super) {

      __extends(Project, _super);

      function Project() {
        return Project.__super__.constructor.apply(this, arguments);
      }

      Project.prototype.el = $('#main');

      Project.prototype.initialize = function() {
        this.template = $$.project;
        this.projectList = new CollectionProject;
        this.breadcrumb = new ModelProjectBreadcrumb;
        this.breadcrumbView = new ViewProjectBreadcrumb({
          model: this.breadcrumb
        });
        this.fileTree = new CollectionFiletree;
        return this.fileBrowserView = new ViewFilebrowser({
          collection: this.fileTree
        });
      };

      Project.prototype.render = function(name, path) {
        var _this = this;
        this.projectList.snatch(function() {
          var project;
          project = _this.projectList.where({
            name: name
          })[0];
          _this.$el.html(_this.template.render({
            projectName: project.get('name'),
            projectInfo: project.get('info')
          }));
          _this.breadcrumb.path(path);
          _this.breadcrumb.set('projectName', name);
          _this.assign(_this.breadcrumbView, '#project-breadcrumb');
          _this.fileTree.id = project.id;
          _this.fileTree.path = path;
          _this.fileTree.name = name;
          _this.assign(_this.fileBrowserView, '#project-file');
          return _this.fileTree.snatch();
        });
        return this;
      };

      return Project;

    })(Backbone.View);
  });

}).call(this);
