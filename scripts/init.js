// Generated by CoffeeScript 1.4.0
(function() {

  define(['backbone'], function(Backbone) {
    Backbone.remoteSync = Backbone.sync;
    return Backbone.sync = function(method, model, option) {
      var data, url;
      if (typeof model.url === 'function') {
        url = model.url();
      } else {
        url = model.url;
      }
      switch (method) {
        case 'read':
          model.once('sync', function() {
            if ((typeof localStorage !== "undefined" && localStorage !== null ? localStorage[url] : void 0) === !JSON.stringify(model.toJSON())) {
              model.trigger('get', JSON.stringify(model.toJSON()));
              return localStorage[url] = JSON.stringify(model.toJSON());
            }
          });
          if ((typeof localStorage !== "undefined" && localStorage !== null ? localStorage[url] : void 0) != null) {
            data = JSON.parse(localStorage[url]);
            if (model instanceof Backbone.Collection) {
              model.reset(data);
            }
            if (model instanceof Backbone.Model) {
              model.set(data);
            }
            model.trigger('get');
          }
          break;
        case 'create':
          if (typeof localStorage !== "undefined" && localStorage !== null) {
            localStorage[url] = JSON.stringify(model.toJSON());
          }
          break;
        case 'update':
          if (typeof localStorage !== "undefined" && localStorage !== null) {
            localStorage[url] = JSON.stringify(model.toJSON());
          }
      }
      arguments[2].silent = true;
      return Backbone.remoteSync.apply(this, arguments);
    };
  });

}).call(this);
